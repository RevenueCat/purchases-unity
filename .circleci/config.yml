version: 2.1

aliases:
  release-tags: &release-tags
    filters:
      tags:
        ignore: /^.*-SNAPSHOT/
      branches:
        ignore: /.*/

  release-branches: &release-branches
    filters:
      tags:
        ignore: /.*/
      branches:
        only: /^release\/.*/

  release-branches-and-main: &release-branches-and-main
    filters:
      tags:
        ignore: /.*/
      branches:
        only:
          - /^release\/.*/
          - main

  only-main-branch: &only-main-branch
    filters:
      tags:
        ignore: /.*/
      branches:
        only: main

orbs:
  revenuecat: revenuecat/sdks-common-config@2.2.0

executors:
  unity:
    docker:
      - image: unityci/editor:2021.3.3f1-base-1.0
        environment:
          TAR_OPTIONS: --no-same-owner

  unity-android:
    docker:
      - image: unityci/editor:2021.3.3f1-android-1
  unity-ios:
    docker:
      - image: unityci/editor:2021.3.3f1-ios-1

parameters:
   action:
     type: enum
     enum: [build, upgrade-hybrid-common, bump]
     default: build
   version:
     type: string
     default: ''
   automatic:
     type: boolean
     default: false

commands:
  import-package:
    description: "Import Purchases.unitypackage"
    steps:
      # When importing the unity package in the following step, Unity tries to compile the project.
      # The project is referencing Purchases, but the Purchases plugin hasn't been imported yet, so the
      # compilation fails. Temporarily removing scripts that reference any dependency before importing the
      # package is a way to avoid the compilation issues.
      - run:
          name: Temporarily remove scripts
          command: |
            mv IntegrationTests/Assets/Editor/CIEditorScript.cs IntegrationTests/Assets/Editor/CIEditorScript.cs.break
            mv IntegrationTests/Assets/Main.cs IntegrationTests/Assets/Main.cs.break
            # rename all the .cs files in APITests to .cs.break
            for file in IntegrationTests/Assets/APITests/*.cs ; do mv "$file" "${file%%}.break" ; done


      - run:
          name: Import package
          command: |
            /opt/unity/Editor/Unity \
              -projectPath IntegrationTests \
              -quit \
              -batchmode \
              -nographics \
              -logFile /dev/stdout \
              -importPackage ../Purchases.unitypackage

      - run:
          name: Bring scripts back
          command: |
            mv IntegrationTests/Assets/Editor/CIEditorScript.cs.break IntegrationTests/Assets/Editor/CIEditorScript.cs
            mv IntegrationTests/Assets/Main.cs.break IntegrationTests/Assets/Main.cs
            # rename all the .cs.break files in APITests to .cs
            for file in IntegrationTests/Assets/APITests/*.cs.break ; do mv "$file" "${file%.*}" ; done

  activate-license:
    description: "Activates Unity license"
    steps:
      - run:
          name: Decode license in env variable
          command: echo $UNITY_LICENSE | base64 --decode >> Unity.x.ulf
      - run:
          name: Import Unity license file
          command: |
            /opt/unity/Editor/Unity -projectPath IntegrationTests \
            -quit \
            -batchmode \
            -nographics \
            -silent-crashes \
            -logFile \
            -manualLicenseFile Unity.x.ulf || exit 0

  perform-build:
    description: "Builds Unity project"
    parameters:
      project:
        type: string
      target:
        type: string
    steps:
      - run:
          name: Build Unity project and export it
          command: |
            /opt/unity/Editor/Unity \
            -projectPath << parameters.project >> \
            -quit \
            -batchmode \
            -buildTarget << parameters.target >> \
            -customBuildTarget << parameters.target >> \
            -customBuildName << parameters.target >> \
            -customBuildPath build \
            -customBuildOptions AcceptExternalModificationsToPlayer \
            -executeMethod BuildCommand.PerformBuild \
            -nographics \
            -logFile /dev/stdout || exit 0

  resolve-dependencies:
    description: "Resolve Dependencies"
    parameters:
      project:
        type: string
      target:
        type: string
    steps:
      - run:
          name: Resolve project dependencies
          command: |
            /opt/unity/Editor/Unity \
              -projectPath << parameters.project >> \
              -batchmode \
              -buildTarget << parameters.target >> \
              -customBuildTarget << parameters.target >> \
              -customBuildOptions AcceptExternalModificationsToPlayer \
              -executeMethod BuildCommand.Resolve \
              -nographics \
              -logFile /dev/stdout

  copy-api-tests-and-utils-to-subtester:
    description: "Copy APITests from IntegrationTests to Subtester"
    steps:
      - run:
          name: "Copy APITests from IntegrationTests to Subtester"
          command: |
            mkdir Subtester/Assets/APITests
            mkdir Subtester/Assets/Editor
            cp -r IntegrationTests/Assets/APITests/*.cs Subtester/Assets/APITests/
            cp IntegrationTests/Assets/Editor/CIEditorScript.cs Subtester/Assets/Editor/CIEditorScript.cs

jobs:
  export-package:
    executor: unity

    steps:
      - checkout
      - activate-license

      - run:
          name: Export Unity Package
          description: Creating Purchases.unitypackage, this may take a minute.
          command: |
            ./scripts/create-unity-package.sh -u /opt/unity/Editor/Unity

      - persist_to_workspace:
          root: .
          paths:
            - Purchases.unitypackage

      - store_artifacts:
          path: Purchases.unitypackage

  build-subtester-android:
    executor: unity-android
    steps:
      - checkout
      - attach_workspace:
          at: .

      - copy-api-tests-and-utils-to-subtester

      - activate-license

      - resolve-dependencies:
          project: Subtester
          target: Android

      - perform-build:
          project: Subtester
          target: Android

      - store_artifacts:
          path: Subtester/buildAndroid.apk

  build-subtester-ios:
    executor: unity-ios
    steps:
      - checkout
      - attach_workspace:
          at: .

      - copy-api-tests-and-utils-to-subtester

      - activate-license

      - resolve-dependencies:
          project: Subtester
          target: iOS

      - perform-build:
          project: Subtester
          target: iOS

      - persist_to_workspace:
          root: .
          paths:
            - Subtester/buildiOS

  build-integration-tests-android:
    executor: unity-android
    steps:
      - checkout
      - attach_workspace:
          at: .

      - activate-license

      - import-package

      - resolve-dependencies:
          project: IntegrationTests
          target: Android

      - perform-build:
          project: IntegrationTests
          target: Android

      - store_artifacts:
          path: IntegrationTests/buildAndroid.apk

  build-integration-tests-ios:
    executor: unity-ios
    steps:
      - checkout
      - attach_workspace:
          at: .

      - activate-license

      - import-package

      - resolve-dependencies:
          project: IntegrationTests
          target: iOS

      - perform-build:
          project: IntegrationTests
          target: iOS

      - persist_to_workspace:
          root: .
          paths:
            - IntegrationTests/buildiOS

  archive-ios:
    description: "Run iOS integration tests for Unity"
    macos:
      # 14.3.x requires macOS 13.0 which this image doesn't currently have.
      xcode: 14.1.0
    steps:
      - checkout
      - attach_workspace:
          at: .

      - revenuecat/install-gem-mac-dependencies:
          working_directory: IntegrationTests
          cache-version: v1

      - restore_cache:
          key: 1-pods-{{ checksum "RevenueCat/Plugins/Editor/RevenueCatDependencies.xml" }}

      - run:
          name: Install Pods
          working_directory: IntegrationTests/buildiOS
          command: pod install --verbose

      - save_cache:
          key: 1-pods-{{ checksum "RevenueCat/Plugins/Editor/RevenueCatDependencies.xml" }}
          paths:
            - IntegrationTests/buildiOS/Pods

      - run:
          name: Setup fastlane
          working_directory: IntegrationTests/buildiOS
          command: |
            ln -s ../fastlane .

      - run:
          name: Archive
          working_directory: IntegrationTests/buildiOS
          command: bundle exec fastlane archive workspace:"buildiOS/Unity-iPhone.xcworkspace"

  github-release:
    description: "Creates a github release"
    docker:
      - image: cimg/ruby:3.1.2
    steps:
      - checkout
      - attach_workspace:
          at: .
      - revenuecat/install-gem-unix-dependencies:
          cache-version: v1
      - revenuecat/trust-github-key
      - revenuecat/setup-git-credentials
      - run:
          name: release
          command: bundle exec fastlane github_release

  update-hybrid-common-versions:
    description: "Creates a PR updating purchases-hybrid-common to latest release"
    docker:
      - image: cimg/ruby:3.1.2
    steps:
      - checkout
      - revenuecat/install-gem-mac-dependencies:
          cache-version: v1
      - revenuecat/trust-github-key
      - revenuecat/setup-git-credentials
      - run:
          name: Updating to next version of phc
          command: |
            bundle exec fastlane update_hybrid_common \
            version:<< pipeline.parameters.version >> \
            open_pr:true \
            automatic_release:<< pipeline.parameters.automatic >>

workflows:
  version: 2
  danger:
    when:
      not:
        equal: [ scheduled_pipeline, << pipeline.trigger_source >> ]
    jobs:
      - revenuecat/danger

  deploy-check:
    when:
      not:
        equal: [ scheduled_pipeline, << pipeline.trigger_source >> ]
    jobs:
      - export-package
      - build-subtester-android
      - build-subtester-ios
      - build-integration-tests-android:
          requires:
            - export-package
      - build-integration-tests-ios:
          requires:
            - export-package
      - archive-ios:
          requires:
            - build-integration-tests-ios
      - hold:
          type: approval
          requires:
            - build-integration-tests-android
            - build-subtester-android
            - build-subtester-ios
            - archive-ios
          <<: *release-branches
      - revenuecat/tag-current-branch:
          requires:
            - hold
          <<: *release-branches

  deploy:
    when:
      not:
        equal: [ scheduled_pipeline, << pipeline.trigger_source >> ]
    jobs:
      - export-package: *release-tags
      - github-release:
          requires:
            - export-package
          <<: *release-tags

  weekly-run-workflow:
    when:
      and:
        - equal: [ scheduled_pipeline, << pipeline.trigger_source >> ]
        - equal: [ "release-train", << pipeline.schedule.name >> ]
    jobs:
      - revenuecat/automatic-bump

  manual-trigger-bump:
    when:
      equal: [ bump, << pipeline.parameters.action >> ]
    jobs:
      - revenuecat/automatic-bump

  update-hybrid-common-versions:
    when:
      equal: [ upgrade-hybrid-common, << pipeline.parameters.action >> ]
    jobs:
      - update-hybrid-common-versions
