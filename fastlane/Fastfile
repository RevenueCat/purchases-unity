# This file contains the fastlane.tools configuration
# You can find the documentation at https://docs.fastlane.tools
#
# For a list of all available actions, check out
#
#     https://docs.fastlane.tools/actions
#
# For a list of all available plugins, check out
#
#     https://docs.fastlane.tools/plugins/available-plugins
#

files_with_version_number = [
  './.version',
  './RevenueCat/Plugins/iOS/PurchaseUnityHelper.m',
  './RevenueCat/Plugins/Android/PurchasesWrapper.java'
]
repo_name = 'purchases-unity'
changelog_latest_path = './CHANGELOG.latest.md'
changelog_path = './CHANGELOG.md'

before_all do
  setup_circle_ci
  update_fastlane
end

desc "Bump version, edit changelog, and create pull request"
lane :bump do |options|
  # bump_version_update_changelog_create_pr(
  #   current_version: current_version_number,
  #   changelog_latest_path: changelog_latest_path,
  #   changelog_path: changelog_path,
  #   files_to_update: files_with_version_number,
  #   repo_name: repo_name,
  #   github_rate_limit: options[:github_rate_limit],
  #   editor: options[:editor],
  #   next_version: options[:next_version]
  # )
  update_versions_file
end

desc "Make github release"
lane :github_release do |options|
  create_github_release(
    version: options[:version],
    repo_name: repo_name,
    github_api_token: ENV["GITHUB_TOKEN"],
    changelog_latest_path: changelog_latest_path,
    upload_assets: [] # TODO: Add assets
  )
end

desc "Creates PR changing version to next minor adding a -SNAPSHOT suffix"
lane :prepare_next_version do |options|
  create_next_snapshot_version(
    current_version: current_version_number,
    repo_name: repo_name,
    github_pr_token: ENV["GITHUB_PULL_REQUEST_API_TOKEN"],
    files_to_update: files_with_version_number
  )
end

def update_versions_file
  versions_file_path = './VERSIONS.md'
  update_hybrids_versions_file(
    versions_file_path: versions_file_path,
    new_sdk_version: current_version_number,
    hybrid_common_version: parse_previous_hybrid_version
  )
  File.open(versions_file_path, 'r+') do |file|
    lines = file.each_line.to_a
    previous_to_last_version_compatibility = lines[3].split('|')[-2].strip
    last_version_line_columns = lines[2].split('|')
    last_version_line_columns.insert(-2, " #{previous_to_last_version_compatibility} |")
    lines[2] = last_version_line_columns.join
    file.rewind
    file.write(lines.join)
  end
  # commit_current_changes(commit_message: 'Update VERSIONS.md')
  # push_to_git_remote(set_upstream: true)
end